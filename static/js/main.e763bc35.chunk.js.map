{"version":3,"sources":["components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","disabled","isStart","onClick","breakInterval","decreaseBreak","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalId","start","bind","decreaseTimer","pause","reset","setInterval","this","startStopTimer","setState","timerMinute","toggleInterval","updateTimerMinute","prevState","clearInterval","resetTimer","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onToggleInterval","onUpdateTimerMinute","onReset","onStartStopTimer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e763bc35.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction BreakInterval(props){\r\n\r\n    function decreaseCounter(){\r\n        if(props.breakInterval=== 1){\r\n            return ;\r\n        }\r\n      props.decreaseBreak();\r\n    }\r\n    function increaseCounter(){\r\n        if(props.breakInterval=== 60){\r\n            return ;\r\n        }\r\n        props.increaseBreak();\r\n    }\r\n\r\n    return (\r\n<section className=\"interval-container\">\r\n    <h4>Break Length</h4>\r\n    <button disabled={props.isStart===true ? \"disabled\":\"\"} onClick={decreaseCounter}>Down</button>\r\n<p className=\"interval-length\">{props.breakInterval}</p>\r\n    <button disabled={props.isStart===true ? \"disabled\":\"\"} onClick={increaseCounter}>UP</button>\r\n</section>\r\n\r\n    );\r\n\r\n}\r\nexport default BreakInterval;","import React from 'react';\r\n\r\n\r\nfunction SessionLength(props){\r\n\r\n    function decreaseCounter(){\r\n        if(props.sessionLength=== 1){\r\n            return ;\r\n        }\r\n      props.decreaseSession();\r\n    }\r\n    function increaseCounter(){\r\n        if(props.SessionLength=== 60){\r\n            return ;\r\n        }\r\n        props.increaseSession();\r\n    }\r\nreturn (\r\n <section className=\"interval-container\">\r\n     <h4>Session Length</h4> \r\n     <button disabled={props.isStart===true ? \"disabled\":\"\"} onClick={decreaseCounter}>Down</button>\r\n<p className=\"interval-length\">{props.sessionLength}</p>\r\n     <button disabled={props.isStart===true ? \"disabled\":\"\"} onClick={increaseCounter}>Up</button>\r\n </section>\r\n\r\n)\r\n\r\n}\r\nexport default SessionLength","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isSession: true,\r\n            timerSecond: 0,\r\n            intervalId: 0,\r\n\r\n        }\r\n        this.start = this.start.bind(this);\r\n        this.decreaseTimer=this.decreaseTimer.bind(this);\r\n        this.pause=this.pause.bind(this)\r\n        this.reset=this.reset.bind(this)\r\n    }\r\n\r\n    start() {\r\n        let intervalId = setInterval(this.decreaseTimer, 1000)\r\n        this.props.startStopTimer(true);\r\n        this.setState({\r\n            intervalId: intervalId\r\n        })\r\n    }\r\n    \r\n    decreaseTimer() {\r\n        switch (this.state.timerSecond) {\r\n            case 0:\r\n                if (this.props.timerMinute===0){\r\n                    if(this.state.isSession){\r\n                        this.setState({\r\n                            isSession:false\r\n                        })\r\n                        this.props.toggleInterval(this.state.isSession)\r\n                    }else {\r\n                        this.setState({\r\n                            isSession:true\r\n                        })\r\n                        this.props.toggleInterval(this.state.isSession)\r\n                    }\r\n                }else{ this.props.updateTimerMinute()\r\n                    this.setState({\r\n                        timerSecond: 59\r\n                    })}\r\n               \r\n                break;\r\n            default:\r\n                this.setState((prevState) => {\r\n                    return {\r\n                        timerSecond: prevState.timerSecond - 1\r\n                    }\r\n\r\n                })\r\n                break;\r\n        }\r\n\r\n    }\r\n    pause(){\r\n        clearInterval(this.state.intervalId);\r\n        this.props.startStopTimer(false);\r\n    }\r\n    reset(){\r\n        clearInterval(this.state.intervalId);\r\n        this.props.resetTimer();\r\n        this.props.startStopTimer(false);\r\n        this.setState({\r\n            timerSecond:0,\r\n            isSession:true,\r\n        })\r\n    }\r\n    onStartStopTimer(){}\r\n    render() {\r\n\r\n        return (\r\n            <section>\r\n                <section className=\"timer-container\">\r\n                    <h4>{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\r\n        <span className={this.props.timerMinute<1?\"red-text timer\":\"timer\"}  >{this.props.timerMinute}</span>\r\n                    <span >:</span>\r\n                    <span className={this.props.timerMinute<1?\"red-text timer\":\"timer\"}>{this.state.timerSecond === 0 ? \"00\" :\r\n                        this.state.timerSecond < 10 ? \"0\" + this.state.timerSecond :\r\n                            this.state.timerSecond}</span>\r\n                </section>\r\n                <section className=\"timer-actions\">\r\n                    <button onClick={this.props.isStart===false? this.start:this.pause}>Start/Pause</button>\r\n                    <button onClick={this.reset}>Reset</button>\r\n                </section>\r\n            </section>\r\n        );\r\n    }\r\n}\r\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './BreakInterval';\nimport SessionLength from './SessionLength';\nimport Timer from './Timer';\nclass App extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        breakLength: 5,\n        sessionLength: 25,\n        timerMinute: 25,\n        isStart:false,\n      }\n\n      this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n      this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n      this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n      this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\nthis.onToggleInterval=this.onToggleInterval.bind(this);\nthis.onUpdateTimerMinute=this.onUpdateTimerMinute.bind(this);\nthis.onReset=this.onReset.bind(this);\nthis.onStartStopTimer=this.onStartStopTimer.bind(this)\n    }\n  onIncreaseBreakLength() {\n    this.setState(prevState => {\n      return {\n        breakLength: prevState.breakLength + 1\n      };\n\n    })\n  }\n  onDecreaseBreakLength() {\n    this.setState(prevState => {\n      return {\n        breakLength: prevState.breakLength - 1\n      };\n\n    })\n\n  }\n  onIncreaseSessionLength() {\n    this.setState(prevState => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n      };\n\n    })\n\n\n  }\n  onDecreaseSessionLength() {\n    this.setState(prevState => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n      };\n\n    })\n\n  }\n  onUpdateTimerMinute() {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n\n    })\n  }\n  onToggleInterval(isSession) {\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLength\n      })\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength\n      })\n    }\n  }\n  onReset(){\n    this.setState({\n      timerMinute: this.state.sessionLength\n    })\n  }\n  onStartStopTimer(isStart){\n    this.setState({\n      isStart:isStart\n    })\n  }\n  render() {\n    return (\n      <main>\n        <h2>Pomodoro Clock</h2>\n        <section className=\"interval-length-container\">\n          <BreakInterval breakInterval={this.state.breakLength} increaseBreak={this.onIncreaseBreakLength} decreaseBreak={this.onDecreaseBreakLength} \n           isStart={this.state.isStart} />\n          <SessionLength sessionLength={this.state.sessionLength} increaseSession={this.onIncreaseSessionLength} decreaseSession={this.onDecreaseSessionLength} \n          isStart={this.state.isStart} />\n        </section>\n        <Timer timerMinute={this.state.timerMinute}\n          breakLength={this.state.breakLength} updateTimerMinute={this.onUpdateTimerMinute} toggleInterval={this.onToggleInterval} resetTimer={this.onReset}\n           startStopTimer={this.onStartStopTimer} isStart={this.state.isStart} />\n      </main>\n\n    );\n\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}